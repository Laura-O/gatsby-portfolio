// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`blog no post 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Index
    data={
      Object {
        "allMarkdownRemark": Object {
          "edges": Array [],
        },
        "indexCover": Object {
          "sizes": Object {
            "sizes": "image",
          },
        },
        "site": Object {
          "siteMetadata": Object {
            "title": "title",
          },
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Styled(styled.div)>
        <Seo
          data={undefined}
          isPost={false}
        />
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            title
             • Blog
          </title>
        </HelmetWrapper>
        <Footer />
      </Styled(styled.div)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Seo
            data={undefined}
            isPost={false}
          />,
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              title
               • Blog
            </title>
          </HelmetWrapper>,
          Array [],
          <Footer />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "data": undefined,
            "isPost": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              title
               • Blog
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "title",
                " • Blog",
              ],
            },
            "ref": null,
            "rendered": Array [
              "title",
              " • Blog",
            ],
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Styled(styled.div)>
          <Seo
            data={undefined}
            isPost={false}
          />
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              title
               • Blog
            </title>
          </HelmetWrapper>
          <Footer />
        </Styled(styled.div)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Seo
              data={undefined}
              isPost={false}
            />,
            <HelmetWrapper
              defer={true}
              encodeSpecialCharacters={true}
            >
              <title>
                title
                 • Blog
              </title>
            </HelmetWrapper>,
            Array [],
            <Footer />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "data": undefined,
              "isPost": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <title>
                title
                 • Blog
              </title>,
              "defer": true,
              "encodeSpecialCharacters": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "title",
                  " • Blog",
                ],
              },
              "ref": null,
              "rendered": Array [
                "title",
                " • Blog",
              ],
              "type": "title",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`blog rendering 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Index
    data={
      Object {
        "allMarkdownRemark": Object {
          "edges": Array [
            Object {
              "node": Object {
                "frontmatter": Object {
                  "date": "date",
                  "excerpt": "excerpt",
                  "image": Object {
                    "childImageSharp": Object {
                      "fluid": Object {
                        "sizes": "image",
                      },
                    },
                  },
                  "path": "path",
                  "timeToRead": 10,
                  "title": "title",
                },
                "id": "id",
              },
            },
          ],
        },
        "indexCover": Object {
          "sizes": Object {
            "sizes": "image",
          },
        },
        "site": Object {
          "siteMetadata": Object {
            "title": "title",
          },
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Styled(styled.div)>
        <Seo
          data={undefined}
          isPost={false}
        />
        <HelmetWrapper
          defer={true}
          encodeSpecialCharacters={true}
        >
          <title>
            title
             • Blog
          </title>
        </HelmetWrapper>
        <styled.div>
          <styled.h3>
            <Unknown
              to="path"
            >
              title
            </Unknown>
          </styled.h3>
          <Image
            Tag="div"
            alt=""
            critical={false}
            fadeIn={true}
            fluid={
              Object {
                "sizes": "image",
              }
            }
          />
          <styled.div>
            <small>
              date
            </small>
            <small>
              10
               mins
            </small>
          </styled.div>
          <styled.div>
            excerpt
          </styled.div>
        </styled.div>
        <Footer />
      </Styled(styled.div)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Seo
            data={undefined}
            isPost={false}
          />,
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              title
               • Blog
            </title>
          </HelmetWrapper>,
          Array [
            <styled.div>
              <styled.h3>
                <Unknown
                  to="path"
                >
                  title
                </Unknown>
              </styled.h3>
              <Image
                Tag="div"
                alt=""
                critical={false}
                fadeIn={true}
                fluid={
                  Object {
                    "sizes": "image",
                  }
                }
              />
              <styled.div>
                <small>
                  date
                </small>
                <small>
                  10
                   mins
                </small>
              </styled.div>
              <styled.div>
                excerpt
              </styled.div>
            </styled.div>,
          ],
          <Footer />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "data": undefined,
            "isPost": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <title>
              title
               • Blog
            </title>,
            "defer": true,
            "encodeSpecialCharacters": true,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "title",
                " • Blog",
              ],
            },
            "ref": null,
            "rendered": Array [
              "title",
              " • Blog",
            ],
            "type": "title",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "id",
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.h3>
                <Unknown
                  to="path"
                >
                  title
                </Unknown>
              </styled.h3>,
              <Image
                Tag="div"
                alt=""
                critical={false}
                fadeIn={true}
                fluid={
                  Object {
                    "sizes": "image",
                  }
                }
              />,
              <styled.div>
                <small>
                  date
                </small>
                <small>
                  10
                   mins
                </small>
              </styled.div>,
              <styled.div>
                excerpt
              </styled.div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Unknown
                  to="path"
                >
                  title
                </Unknown>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": "title",
                  "to": "path",
                },
                "ref": null,
                "rendered": "title",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "Tag": "div",
                "alt": "",
                "critical": false,
                "fadeIn": true,
                "fluid": Object {
                  "sizes": "image",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <small>
                    date
                  </small>,
                  <small>
                    10
                     mins
                  </small>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "date",
                  },
                  "ref": null,
                  "rendered": "date",
                  "type": "small",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      10,
                      " mins",
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    10,
                    " mins",
                  ],
                  "type": "small",
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "excerpt",
              },
              "ref": null,
              "rendered": "excerpt",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Styled(styled.div)>
          <Seo
            data={undefined}
            isPost={false}
          />
          <HelmetWrapper
            defer={true}
            encodeSpecialCharacters={true}
          >
            <title>
              title
               • Blog
            </title>
          </HelmetWrapper>
          <styled.div>
            <styled.h3>
              <Unknown
                to="path"
              >
                title
              </Unknown>
            </styled.h3>
            <Image
              Tag="div"
              alt=""
              critical={false}
              fadeIn={true}
              fluid={
                Object {
                  "sizes": "image",
                }
              }
            />
            <styled.div>
              <small>
                date
              </small>
              <small>
                10
                 mins
              </small>
            </styled.div>
            <styled.div>
              excerpt
            </styled.div>
          </styled.div>
          <Footer />
        </Styled(styled.div)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Seo
              data={undefined}
              isPost={false}
            />,
            <HelmetWrapper
              defer={true}
              encodeSpecialCharacters={true}
            >
              <title>
                title
                 • Blog
              </title>
            </HelmetWrapper>,
            Array [
              <styled.div>
                <styled.h3>
                  <Unknown
                    to="path"
                  >
                    title
                  </Unknown>
                </styled.h3>
                <Image
                  Tag="div"
                  alt=""
                  critical={false}
                  fadeIn={true}
                  fluid={
                    Object {
                      "sizes": "image",
                    }
                  }
                />
                <styled.div>
                  <small>
                    date
                  </small>
                  <small>
                    10
                     mins
                  </small>
                </styled.div>
                <styled.div>
                  excerpt
                </styled.div>
              </styled.div>,
            ],
            <Footer />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "data": undefined,
              "isPost": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <title>
                title
                 • Blog
              </title>,
              "defer": true,
              "encodeSpecialCharacters": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "title",
                  " • Blog",
                ],
              },
              "ref": null,
              "rendered": Array [
                "title",
                " • Blog",
              ],
              "type": "title",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "id",
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.h3>
                  <Unknown
                    to="path"
                  >
                    title
                  </Unknown>
                </styled.h3>,
                <Image
                  Tag="div"
                  alt=""
                  critical={false}
                  fadeIn={true}
                  fluid={
                    Object {
                      "sizes": "image",
                    }
                  }
                />,
                <styled.div>
                  <small>
                    date
                  </small>
                  <small>
                    10
                     mins
                  </small>
                </styled.div>,
                <styled.div>
                  excerpt
                </styled.div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Unknown
                    to="path"
                  >
                    title
                  </Unknown>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": "title",
                    "to": "path",
                  },
                  "ref": null,
                  "rendered": "title",
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "Tag": "div",
                  "alt": "",
                  "critical": false,
                  "fadeIn": true,
                  "fluid": Object {
                    "sizes": "image",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <small>
                      date
                    </small>,
                    <small>
                      10
                       mins
                    </small>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "date",
                    },
                    "ref": null,
                    "rendered": "date",
                    "type": "small",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        10,
                        " mins",
                      ],
                    },
                    "ref": null,
                    "rendered": Array [
                      10,
                      " mins",
                    ],
                    "type": "small",
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "excerpt",
                },
                "ref": null,
                "rendered": "excerpt",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
